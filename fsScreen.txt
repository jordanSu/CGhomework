#version 330

// Default color buffer location is 0
// If you create framebuffer your own, you need to take care of it
layout(location=0) out vec4 outputColor;

in vec2 fTexcoord;	// Texture coordinate

//Uniforms
uniform float pixelMulti;
uniform float Zoom;
uniform float circleArea;
uniform vec2 mouseLoc;
uniform mat3 gaussMat;
uniform sampler2D uSampler;

const float offset = 1.0 / 600;
vec2 offsets[9] = vec2[](
    vec2(-offset, offset),  // top-left
    vec2(0.0f,    offset),  // top-center
    vec2(offset,  offset),  // top-right
    vec2(-offset, 0.0f),    // center-left
    vec2(0.0f,    0.0f),    // center-center
    vec2(offset,  0.0f),    // center-right
    vec2(-offset, -offset), // bottom-left
    vec2(0.0f,    -offset), // bottom-center
    vec2(offset,  -offset)  // bottom-right
);

float kernel[9] = float[](
1.0 / 16, 2.0 / 16, 1.0 / 16,
2.0 / 16, 4.0 / 16, 2.0 / 16,
1.0 / 16, 2.0 / 16, 1.0 / 16
);



void main()
{
    vec2 finalTexcoord;
    vec2 normalLoc = vec2(mouseLoc.x/800.0, mouseLoc.y/600.0);
	if (pow(gl_FragCoord.x-(mouseLoc.x*pixelMulti),2) + pow(gl_FragCoord.y-(mouseLoc.y*pixelMulti),2) <= circleArea)
    {
        finalTexcoord = (fTexcoord-normalLoc) * (1.0/Zoom) + normalLoc;
        vec3 sampleTex[9];
        for(int i = 0; i < 9; i++)
        {
            sampleTex[i] = vec3(texture(uSampler, finalTexcoord + offsets[i]));
        }
        vec3 col = vec3(0.0);
        for(int i = 0; i < 3; i++)
            for (int j = 0; j < 3; j++)
                col += sampleTex[i*3+j] * gaussMat[i][j];

        outputColor = vec4(col, 1.0);

    }
    else {
        finalTexcoord = fTexcoord;
        outputColor = texture(uSampler, finalTexcoord);
    }
}
